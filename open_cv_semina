#include <opencv2/opencv.hpp>
#include <stdio.h>
#include <iostream>
using namespace std;
using namespace cv;

/*

int main() {
	Size2d sz(100.5, 60.6);
	Point2f pt1(20.f, 30.f), pt2(100.f, 200.f);

	Rect_<int> rect1(10, 10, 30, 50);
	Rect_<float> rect2(pt1, pt2);
	Rect_<double> rect3(Point2d(20.5, 10), sz);

	Rect rect4 = rect1 + (Point)pt1;
	Rect2f rect5 = rect2 + (Size2f)sz;
	Rect2d rect6 = rect1 & (Rect)rect2;
	
	cout << "rect3 = " << rect3.x << "," << rect3.y << ",";
	cout << rect3.width << "x" << rect3.height << endl;
	cout << "rect4= " << rect4.tl() << " " << rect4.br() << endl;
	cout << "rect5의 크기 = " << rect5.size() << endl;
	cout << "[rect6]= " << rect6 << endl;
	return 0;
}


int main() {
	Mat image(300, 500, CV_8UC1, Scalar(255));
	Point2f center(250, 150), pts[4];
	Size2f size(300, 100);
	RotatedRect rot_rect(center, size, 20);

	Rect bound_rect = rot_rect.boundingRect();
	rectangle(image, bound_rect, Scalar(0), 1);
	circle(image, rot_rect.center, 1, Scalar(0), 2);
	rot_rect.points(pts);
	for (int i = 0; i < 4; i++) {
		circle(image, pts[i], 4, Scalar(0), 1);
		line(image, pts[i], pts[(i + 1) % 4], Scalar(0), 2);
	}
	imshow("회전", image);
	waitKey(0);
	return 0;
}



int main() {

	for (int deg = 3600; deg > 0; deg += 1) {
		Mat image(700, 700, CV_8UC1, Scalar(255));
		Point2f center(250, 200), pts[4];
		Size2f size(300, 100);
		RotatedRect rot_rect(center, size, deg); // constant is angle

		Rect bound_rect = rot_rect.boundingRect();
		rectangle(image, bound_rect, Scalar(0), 1);
		circle(image, rot_rect.center, 1, Scalar(0), 2);
		rot_rect.points(pts);
		for (int i = 0; i < 4; i++) {
			circle(image, pts[i], 14, Scalar(0), 1); // 꼭지점 생성, 세번째 매개변수는 원의 크기
			line(image, pts[i], pts[(i + 1) % 4], Scalar(0), 2); // 라인 생성, 다섯번째 매개변수는 라인의 두께
		}

		imshow("회전사각형", image);
		waitKey(10);
	}

	return 0;

}

int main() {
	float data[] = {
	   1.2f, 2.3f,3.2f,
	   4.5f,5.f,6.5f
	};
	// Mat 객체 선언 방법
	Mat m1(2, 3, CV_8U);
	Mat m2(2, 3, CV_8U, Scalar(300));   //   uchar형 -> 255로 저장
	Mat m3(2, 3, CV_16S, Scalar(300));   //   short형 -> 300으로 저장
	Mat m4(2, 3, CV_32F, data);      //   배열 원소로 초기화

	//   Size_ 객체로 Mat 객체 선언 방법
	Size sz(2, 3);
	Mat m5(Size(2, 3), CV_64F);
	Mat m6(sz, CV_32F, data);

	cout << "[m1] = " << endl << m1 << endl;
	cout << "[m2] = " << endl << m2 << endl;
	cout << "[m3] = " << endl << m3 << endl;
	cout << "[m4] = " << endl << m4 << endl;
	cout << "[m5] = " << endl << m5 << endl;
	cout << "[m6] = " << endl << m6 << endl;

	return 0;
}


int main() {
	Mat m1 = Mat::ones(3, 5, CV_8UC1);
	Mat m2 = Mat::zeros(3, 5, CV_8UC1);
	Mat m3 = Mat::eye(6, 6, CV_8UC1);

	cout << "[m1] = " << endl << m1 << endl;
	cout << "[m2] = " << endl << m2 << endl;
	cout << "[m3] = " << endl << m3 << endl;
	return 0;
}

int main() {

	double a = 32.123, b = 2.7;
	short c = 400;
	float d = 10.f, e=11.f, f=13.f;

	Mat_<int> m1(2, 4);
	Mat_<uchar> m2(3, 4, 100);
	Mat_<short> m3(4, 5, c);

	m1 << 1, 2, 3, 4, 5, 6;
	Mat m4 = (Mat_<double>(2, 3) << 1, 2, 3, 4, 5, 6);
	Mat m5 = (Mat_<float>(2, 3) << a, b, c, d, e, f);

	cout << "[m1] = " << endl << m1 << endl;
	cout << "[m2] = " << endl << m2 << endl<<endl;
	cout << "[m3] = " << endl << m3 << endl<<endl;
	cout << "[m4] = " << endl << m4 << endl;
	cout << "[m5] = " << endl << m5 << endl;
	return 0;
}


int main() {
	Matx<int, 3, 3> m1(1, 2, 3, 4, 5, 6, 7, 8, 9);
	Matx<float, 2, 3> m2(1, 2, 3, 4, 5, 6);
	Matx<double, 3, 5> m3(3, 4, 5, 7);

	Matx23d m4(3, 4, 5, 6, 7, 8);
	Matx34d m5(1, 2, 3, 10, 11, 12, 13, 14, 15);
	Matx66f m6(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

	cout << "m5(0,0) = " << m5(0, 0) << " m5(1,0) = " << m5(1, 0) << endl;
	cout << "m6(0,1) = " << m6(0, 1) << " m6(1,3) = " << m6(1, 3) << endl;

	cout << "[m1] = " << endl << m1 << endl;
	cout << "[m5] = " << endl << m5 << endl;
	cout << "[m6] = " << endl << m6 << endl << endl;
	return 0;
}



int main() {
	Mat m1(4, 3, CV_32FC3);
	cout << "차원 수 = " << m1.dims << endl;
	cout << "행 개수 = " << m1.rows << endl;
	cout << "열 개수 = " << m1.cols << endl;
	cout << "행렬 크기 = " << m1.size() << endl << endl;

	cout << "전체 원소 개수 = " << m1.total() << endl;
	cout << "한 원소의 크기 = " << m1.elemSize() << endl;
	cout << "채널당 한 원소의 크기 = " << m1.elemSize() << endl << endl;

	cout << "타입 = " << m1.type() << endl;
	cout << "타입(채널 수 | 깊이) = " << ((m1.channels() - 1) << 3) + m1.depth() << endl;
	cout << "깊이 = " << m1.depth() << endl;
	cout << "채널 = " << m1.channels() << endl<< endl;

	cout << "step = " << m1.step << endl;
	cout << "step1() = " << m1.step1() << endl;
}



int main() {
	Mat m1(2, 3, CV_8U, 2);
	Mat m2(2, 3, CV_8U, Scalar(10));

	Mat m3 = m1 + m2;
	Mat m4 = m2 - 6;
	Mat m5 = m1;

	cout << "[m2] = " << endl << m2 << endl;
	cout << "[m3] = " << endl << m3 << endl;
	cout << "[m4] = " << endl << m4 << endl;

	cout << "[m1] = " << endl << m1 << endl;
	cout << "[m5] = " << endl << m5 << endl<<endl;
	m5 = 100;
	cout << "[m1] = " << endl << m1 << endl;
	cout << "[m5] = " << endl << m5 << endl;
	return 0;
}


int main() {
	Mat m = (Mat_<uchar>(2, 4) << 1, 2, 3, 4, 5, 6, 7, 8);
	cout << "[m] = " << endl << m << endl << endl;

	m.resize(1);
	cout << "m.resize(1) = " << endl << m << endl;
	m.resize(3);
	cout << "m.resize(3) = " << endl << m << endl<<endl;
	m.resize(3,Scalar(50));
	cout << "m.resize(5) = " << endl << m << endl;
	return 0;


}

void print_matinfo(string m_name, Mat m) {
	cout << "[" << m_name << " 행렬 ]" << endl;
	cout << "  채녈 수 = " << m.channels() << endl;
	cout << "  행X열 + " << m.rows << "x" << m.cols << endl << endl;
}

int main() {
	Mat m1(2, 6, CV_8U);
	Mat m2 = m1.reshape(2);
	Mat m3 = m1.reshape(3, 2);

	print_matinfo("m1(2,6",m1);
	print_matinfo("m2=m1_reshape(2)",m2);
	print_matinfo("m3=m1_reshape(3,2",m3);

	m1.create(3, 5, CV_16S);
	print_matinfo("m1.create(3,5)",m1);
	return 0;
}
*/
/*
string title = "이벤트 그리기";
Mat image;

void onMouse(int event, int x, int y, int flag, void* param) {
	static Point pt(-1, -1);
	if (event == EVENT_LBUTTONDOWN) {
		if (pt.x < 0) pt = Point(x, y);
		else {
			rectangle(image, pt, Point(x, y),Scalar(50), 2);
			imshow(title, image);
			pt = Point(-1, -1);
		}
	}
	else if (event == EVENT_RBUTTONDOWN) {
		if (pt.x < 0) pt = Point(x, y);
		else {
			Point2d pt2 = pt - Point(x, y);
			int radius = (int)sqrt(pt2.x*pt2.x, pt2.y*pt2.y);
			circle(image, pt, radius, Scalar(150), 2);

			imshow(title, image);
			pt = Point(-1, -1);
		}
		}
	}
}

int main() {
	image = Mat(300, 500, CV_8UC1, Scalar(255));
	imshow(title, image);
	setMouseCallback(title, onMouse, 0);

	waitKey(0);
	return 0;
}
*/

/*
int main() {
	Mat m1(3, 5, CV_32S),m2(3, 5, CV_32S);

	for (int i = 0, k = 0; i < m1.rows; i++) {
		for (int j = 0; j < m1.cols; j++, k++) {
			m1.at<int>(i, j) = k;
			m1.at<short>(i, j) = k;
			// short 형을 할시 자료형 오류가 발생!!
		}
	}
	cout << "[m1] = " << endl << m1 << endl << endl;
	cout << "[m2] = " << endl << m2 << endl;
}
*/

/*
int main() {
	Mat m1(3, 5, CV_32SC1), m2(3, 5, CV_32FC1), m3(3, 5, CV_8UC2), m4(3, 5, CV_32SC3);

	for (int i = 0, k = 0; i < m1.rows; i++) {
		for (int j = 0; j < m1.cols; j++, k++) {
			m1.at<int>(i,j) = k;
			Point pt(j, i);// 포인트 변수는 가로가 먼저
			m2.at<float>(pt) = (float)j;

			int idx[2] = { i,j };
			//m3
			m3.at<Vec2b>(idx) = Vec2b(0, 1);

			//m4
			m4.at<Vec3i>(i, j)[0] = 0;
			m4.at<Vec3i>(i, j)[1] = 1;
			m4.at<Vec3i>(i, j)[2] = 2;

		}
	}
	cout << "[m1] = " << endl << m1 << endl;
	cout << "[m2] = " << endl << m2 << endl;
	cout << "[m3] = " << endl << m3 << endl;
	cout << "[m4] = " << endl << m4 << endl;
	return 0;
}
*/

/*
int main() {
	Mat image = imread("C://Users/user/Desktop/tomato.jpg", IMREAD_COLOR);
	CV_Assert(image.data);

	Mat x_axis, y_axis, xy_axis, rep_img, trans_img;
	flip(image, x_axis, 0);
	flip(image, y_axis, 1);
	flip(image, xy_axis, -1);
	repeat(image, 1, 2, rep_img);
	transpose(image, trans_img);

	imshow("image", image),imshow("x_axis", x_axis);
	imshow("y_axis", y_axis), imshow("xy_axis", xy_axis);
	imshow("rep+img", rep_img), imshow("trans_img", trans_img);
	waitKey();
	return 0;

}
*/

/*
int main() {
	Mat ch0(3, 4, CV_8U, Scalar(10));
	Mat ch1(3, 4, CV_8U, Scalar(20));
	Mat ch2(3, 4, CV_8U, Scalar(30));

	Mat bgr_arr[] = { ch0,ch1,ch2 };
	Mat bgr;
	merge(bgr_arr, 3, bgr);
	vector<Mat> bgr_vec;
	split(bgr, bgr_vec);
	// 행렬과 백터를 분리 한다.
	cout << "[ch0] = " << endl << ch0 << endl;
	cout << "[ch1] = " << endl << ch1 << endl;
	cout << "[ch2] = " << endl << ch2 << endl;

	cout << "[bgr] = " << endl << bgr << endl << endl;
	cout << "[bgr_vec[0]] = " << endl << bgr_vec[0] << endl;
	cout << "[bgr_vec[1]] = " << endl << bgr_vec[1] << endl;
	cout << "[bgr_vec[2]] = " << endl << bgr_vec[2] << endl;
	return 0;
}
*/

/*
int main() {
	Mat image = imread("C://Users/user/Desktop/tomato.jpg", IMREAD_COLOR);
	CV_Assert(image.data);
	Mat bgr[3];
	split(image, bgr);

	imshow("image", image);
	//각자의 채널에 있는 색들이 상대적으로 밝게 보인다.
	imshow("blue 채널", bgr[0]);
	imshow("green 채널", bgr[1]);
	imshow("red 채널", bgr[2]);
	waitKey(0);
	return 0;
}
*/

/*
int main() {
	Mat ch0(3, 4, CV_8U, Scalar(10));
	Mat ch1(3, 4, CV_8U, Scalar(20));
	Mat ch2(3, 4, CV_8U, Scalar(30));
	Mat ch_012;
	
	vector<Mat> vec_012;
	vec_012.push_back(ch0);
	vec_012.push_back(ch1);
	vec_012.push_back(ch2);
	merge(vec_012, ch_012);

	Mat ch_13(ch_012.size(), CV_8UC2);
	Mat ch_2(ch_012.size(), CV_8UC1);
	Mat out[] = { ch_13,ch_2 };
	int from_to[] = { 0,0,2,1,1,2 };
	mixChannels(&ch_012, 1, out, 2, from_to, 3);
	//채널 합성
	cout << "[ch_123] = " << endl << ch_012 << endl << endl;
	cout << "[ch_13] = " << endl << ch_13 << endl;
	cout << "[ch_2]" << endl << ch_2 << endl;
	return 0;
}
*/
/*

int main() {
	Mat image1(250, 250, CV_8U, Scalar(0));
	Mat image2(250, 250, CV_8U, Scalar(0));
	Mat image3, image4, image5, image6;

	Point center = image1.size() / 2;
	circle(image1, center, 100, Scalar(255), -1);
	rectangle(image2, Point(0, 0), Point(125.5, 300), Scalar(255), -1);
	//비트 연산
	bitwise_or(image1, image2, image3);
	bitwise_and(image1, image2, image4);
	bitwise_xor(image1, image2, image5);
	bitwise_not(image1, image6);

	imshow("image1", image1), imshow("image2", image2);
	imshow("image3", image3), imshow("image4", image4);
	imshow("image5", image5), imshow("image6", image6);
	waitKey();
	return 0;
}
*/
/*
//배열간의 사칙연산

int main() {
	Mat m1(3, 6, CV_8UC1, Scalar(10));
	Mat m2(3, 6, CV_8UC1, Scalar(50));
	Mat m_add1, m_add2, m_sub, m_div1, m_div2;
	Mat mask(m1.size(), CV_8UC1);

	Rect rect(Point(3,0), Size(3, 3));
	mask(rect).setTo(1);

	add(m1, m2, m_add1);
	add(m1, m2, m_add2, mask);
	//관심영역만 수행

	divide(m1, m2, m_div1);
	m1.convertTo(m1,CV_32F);
	m2.convertTo(m2, CV_32F);
	divide(m1, m2, m_div2);

	cout << "[m1] = " << endl << m1 << endl;
	cout << "[m2] = " << endl << m2 << endl;
	cout << "[mask] = " << endl << mask <<endl<< endl;

	cout << "[m_add1] = " << endl << m_add1 << endl;
	cout << "[m_add2] = " << endl << m_add2 << endl;
	cout << "[m_div1] = " << endl << m_div1 << endl;
	cout << "[m_div2] = " << endl << m_div2 << endl;
	return 0;
}
*/

/*
int main() {
	//! 필요한 변수들
	Mat logo_white_bg_ch3;              //! 로고 3채널 이미지 (BGR)
	Mat logo_white_bg_ch3_rgb[3];       //! 로고 3채널 이미지의 각 채널.
	Mat logo_mask_black_bg_c1;          //! 로고 검은색 배경 마스크 (BGR)
	Mat logo_mask_white_bg_c1;          //! 로고 흰색 배경 마스크 (BGR)
	Mat logo_mask_black_bg_c3;          //! 로고 검은색 배경 마스크 (Grayscale)
	Mat logo_mask_white_bg_c3;          //! 로고 흰색 배경 마스크 (Grayscale)
	Mat image;                          //! 이미지
	Mat roi;                            //! 이미지에서 로고가 위치할 영역의 참조영역
	Mat roi_clone_masked_black_logo;    //! 참조영역 복사본에 검은색 로고 형태를 씌운 이미지.
	Mat roi_clone_masked_white_logo;    //! 참조영역 복사본에 흰색 로고 형태를 씌운 이미지.
	Mat roi_clone_with_logo;            //! 참조영역 복사본에 로고를 씌운 이미지.


	//! 이미지와 로고를 불러온다.
	image = imread("C://Users/user/Desktop/1.jpg", IMREAD_UNCHANGED);
	logo_white_bg_ch3 = imread("C://Users/user/Desktop/2.jpg", IMREAD_COLOR);
	imshow("logo_white_bg_ch3", logo_white_bg_ch3);


	//! 로고 이미지의 1채널 마스크를 얻는다.
	split(logo_white_bg_ch3, logo_white_bg_ch3_rgb);
	logo_mask_white_bg_c1 =
		logo_white_bg_ch3_rgb[0] &
		logo_white_bg_ch3_rgb[1] &
		logo_white_bg_ch3_rgb[2];
	bitwise_not(logo_mask_white_bg_c1, logo_mask_black_bg_c1);
	imshow("logo_mask_white_bg_c1", logo_mask_white_bg_c1);
	imshow("logo_mask_black_bg_c1", logo_mask_black_bg_c1);


	//! 로고 이미지의 3채널 마스크를 얻는다.
	cvtColor(logo_mask_black_bg_c1, logo_mask_black_bg_c3, COLOR_GRAY2BGR);
	cvtColor(logo_mask_white_bg_c1, logo_mask_white_bg_c3, COLOR_GRAY2BGR);
	imshow("logo_mask_black_bg_c3", logo_mask_black_bg_c3);
	imshow("logo_mask_white_bg_c3", logo_mask_white_bg_c3);


	//! 이미지에서 로고가 위치할 영역의 시작지점을 구한다.
	Point center1 = image.size() / 2;
	Point center2 = logo_white_bg_ch3.size() / 2;
	Point logo_start = center1 - center2;


	//! 로고가 위치할 영역을 관심영역으로 설정한다.
	Rect rect_roi = Rect(logo_start, logo_white_bg_ch3.size());
	roi = image(rect_roi);
	imshow("roi", roi);


	//! 이미지에 로고 형태로 검은색 구멍을 뚫는다.
	copyTo(roi, roi_clone_masked_black_logo, logo_mask_white_bg_c1);
	imshow("roi_clone_masked_black_logo", roi_clone_masked_black_logo);


	//! 검은색 구멍을 하얀색으로 덧칠한다.
	roi_clone_masked_white_logo = roi_clone_masked_black_logo + logo_mask_black_bg_c3;
	imshow("roi_clone_masked_white_logo", roi_clone_masked_white_logo);


	//! 하얀색 구멍에 로고를 씌운다.
	roi_clone_with_logo = roi_clone_masked_white_logo & logo_white_bg_ch3;
	imshow("roi_clone_with_logo", roi_clone_with_logo);


	//! 완성된 부분 이미지를 원본에 씌운다.
	roi_clone_with_logo.copyTo(roi);
	imshow("image", image);
	waitKey();
}
*/


//5_4 **********

int main() {
	Mat image1 = imread("C://Users/user/Desktop/tomato.jpg", 0);
	Mat image2 = imread("C://Users/user/Desktop/456.png", 0);
	CV_Assert(image1.data && image2.data);

	Mat dif_img, abs_dif1, abs_dif2;
	image1.convertTo(image1, CV_16S);
	image2.convertTo(image2, CV_16S);
	subtract(image1, image2, dif_img);

	Rect roi(10, 10, 7, 3);
	cout << "[dif_img] = " << endl << dif_img(roi) << endl;
	abs_dif1 = abs(dif_img);

	image1.convertTo(image1, CV_8U);
	image2.convertTo(image2, CV_8U);
	dif_img.convertTo(dif_img, CV_8U);
	abs_dif1.convertTo(abs_dif1, CV_8U);
	absdiff(image1, image2, abs_dif2);

	cout << "[dif_img] = " << endl << dif_img(roi) << endl << endl;
	cout << "[abs_dif1] = " << endl << abs_dif1(roi) << endl;
	cout << "[abs_dif2] = " << endl << abs_dif2(roi) <<endl;

	imshow("image1", image1), imshow("image2", image2);
	imshow("dif_img", dif_img);
	imshow("abs_dif1", abs_dif1), imshow("abs_dif2", abs_dif2);
	return 0;
}
*/

*
int main() {
	uchar data[] = {
	10,200,5,7,9,
	15,35,60,80,170,
	100,2,55,37,70 };

	Mat  m1(3, 5, CV_8U, data);
	Mat m2(3, 5, CV_8U, Scalar(50));
	Mat m_min, m_max;
	double minVal, maxVal;
	int minIdx[2] = {}, maxIdx[2] = {};
	Point minLoc, maxLoc;

	min(m1, 30, m_min);
	max(m1, m2, m_max);
	minMaxIdx(m1, &minVal, &maxVal, minIdx, maxIdx);
	//val은 주소를 받기 위해 참조 연산자,dx는 배열이므로 배열이름의 주소.
	minMaxLoc(m1, 0, 0, &minLoc, &maxLoc); 
	//min,max 주소 전달,인수가 반환받을 필요가 없을경우 0반환

	cout << "[m1] = " << endl << m1 << endl << endl;
	cout << "[m_min] = " << endl << m_min << endl;
	cout << "[m_max] = " << endl << m_max << endl << endl;

	cout << "m1 행렬 원소 최솟값 : " << minVal << endl;
	cout << "최솟값 좌표 : " << minIdx[1] << "," << minIdx[0] << endl;

	cout << "m1 행렬 원소 최댓값 : " << maxVal << endl;
	cout << "최댓값 좌표 : " << maxIdx[1] << "," << maxIdx[0] << endl;

	cout << "m1 행렬 최솟값 좌표 : " << minLoc << endl;
	cout << "m2 행렬 최댓값 좌표 : " << maxLoc << endl;
	return 0;
}
*/
/*
int main() {
//화질개선 가능!! 최솟값과 최댓값의 차이가 작을 수록
	Mat image = imread("C://Users/user/Desktop/456.png", IMREAD_GRAYSCALE);
	double minVal, maxVal;
	minMaxIdx(image, &minVal, &maxVal);
	double ratio = (maxVal - minVal) / 255.0;
	Mat dst = (image - minVal) / ratio;

	cout << "최솟값 = " << minVal << endl;
	cout << "최댓값 = " << maxVal << endl;
	imshow("image", image);
	imshow("dst", dst);
	waitKey();
	return 0;
}
*/

/*
int main() {
	Mat image = imread("C://Users/user/Desktop/tomato.jpg", 1);
	CV_Assert(image.data);
	Mat mask(image.size(), CV_8U, Scalar(0)), mean, stddev;
	mask(Rect(20, 40, 70, 70)).setTo(255);

	Scalar sum_value = sum(image);
	Scalar mean_value1 = mean(image);
	Scalar mean_value2 = mean(image, mask);

	cout << "[sum_value] = " << sum_value << endl;
	cout << "[sum_value1] = " << mean_value1 << endl;
	cout << "[sum_value2] = " << mean_value2 << endl;

	meanStdDev(image, mean, stddev);
	cout << "[mean] = " << mean << endl;
	cout << "[stddev] = " << stddev << endl << endl;

	meanStdDev(image, mean, stddev, mask);
	cout << "[mean] = " << mean << endl;
	cout << "[stddev] = " << stddev << endl;

	imshow("image", image), imshow("mask", mask);
	waitKey();
	return 0;
}
*/

/*
int main() {
	Mat_<uchar> m1(3, 5);
	m1 << 11, 2, 3, 4, 10, 6, 10, 15, 9, 7, 7, 12, 8, 14, 1;

	Mat m_sort1, m_sort2, m_sort3, m_sort_idx1, m_sort_idx2;
	cv::sort(m1, m_sort1, SORT_EVERY_ROW);//행오름
	cv::sort(m1, m_sort2, SORT_EVERY_ROW+SORT_DESCENDING);//행내림
	cv::sort(m1, m_sort3, SORT_EVERY_COLUMN);//열오름

	cout << "[m1] = " << endl << m1 << endl << endl;
	cout << "[m_sort1] = " << endl << m_sort1 << endl << endl;
	cout << "[m_sort2] = " << endl << m_sort2 << endl << endl;
	cout << "[m_sort3] = " << endl << m_sort3 << endl << endl;
	return 0;
}
*/

/*
int main() {
	Mat_<uchar> m1(3, 5);
	m1 << 11, 2, 3, 4, 10, 6, 10, 15, 9, 7, 7, 12, 8, 14, 1;

	Mat m_sort_idx1, m_sort_idx2, m_sort_id3;
	sortIdx(m1, m_sort_idx1, SORT_EVERY_ROW);
	sortIdx(m1, m_sort_idx2, SORT_EVERY_COLUMN);
	//sort인덱스와 index값은 다르다. 원본원소와 원본좌표

	cout << "[m1] = " << endl << m1 << endl << endl;
	cout << "[m_sort_idx1] = " << endl << m_sort_idx1 << endl << endl;
	cout << "[m_sort_idx2] = " << endl << m_sort_idx2 << endl << endl;
	return 0;
}
*/

/*
int main() {
	Matx<ushort, 5, 4> pts;
	Mat_<int> sizes, sort_idx;
	vector<Rect> rects;
	randn(pts, Scalar(200), Scalar(100));

	cout << "---------------------" << endl;
	cout << "  랜덤 사각형 정보" << endl;
	cout << "---------------------" << endl;
	for (int i = 0; i < pts.rows; i++) {
		Point pt1(pts(i, 0), pts(i, 1));
		Point pt2(pts(i, 2), pts(i, 3));
		rects.push_back(Rect(pt1, pt2));
		sizes.push_back(rects[i].area());
		cout << format("rect[%d] = ", i) << rects[i] << endl;
	}
	sortIdx(sizes, sort_idx, SORT_EVERY_COLUMN+SORT_DESCENDING);

	cout << endl << " 크기순 정렬 사각형 정보 \t크기 " << endl;
	cout << "---------------------" << endl;
	for (int i = 0; i < rects.size(); i++) {
		int idx = sort_idx(i);
		cout << rects[idx] << "\t" << sizes(idx) << endl;
	}
	cout << "---------------------" << endl;
	return 0;

}
*/

/*
int main() {
//형렬 감축 연산
	Mat_<double> m1(3, 5);
	m1 << 11, 2, 3, 4, 10, 6, 10, 15, 9, 7, 7, 12, 8, 14, 1;
	Mat m_reduce1, m_reduce2, m_reduce3, m_reduce4;
	
	reduce(m1, m_reduce1, 0, REDUCE_SUM);
	reduce(m1, m_reduce2, 1, REDUCE_AVG);
	reduce(m1, m_reduce3, 0, REDUCE_MAX);
	reduce(m1, m_reduce4, 1, REDUCE_MIN);

	cout << "[m1] = " << endl<<m1 << endl << endl;
	cout << "[m_reduce_sum] = "<<m_reduce1<< endl<<endl;
	cout << "[m_reduce_avg] = "<< m_reduce2<<endl;
	cout << "[m_reduce_max] = "<< m_reduce3<<endl;
	cout << "[m_reduce_min] = "<<m_reduce4<< endl;
	return 0;
}
*/

/*
int main() {
	Matx23f src1(1, 2, 3, 4, 5, 1);
	Matx23f src2(5, 4, 2, 3, 2, 1);
	Matx32f src3(5, 4, 2, 3, 2, 1);
	Mat dst1, dst2, dst3;
	double alpha = 1.0, beta = 1.0;

	gemm(src1, src2, alpha, Mat(), beta, dst1, GEMM_1_T);
	gemm(src1, src2, alpha, noArray(), beta, dst2, GEMM_2_T);
	gemm(src1, src3, alpha, noArray(), beta, dst3);

	cout << "[src1] = " << endl << src1 << endl;
	cout << "[src2] = " << endl << src2 << endl;
	cout << "[src3] = " << endl << src3 << endl<<endl;

	cout << "[dst1] = " << endl << dst1 << endl;
	cout << "[dst2] = " << endl << dst2 << endl << endl;
	cout << "[dst3] = " << endl << dst3 << endl;
	return 0;
}
*/

/*
int main() {
	vector<Point> rect_pt1, rect_pt2;
	rect_pt1.push_back(Point(200, 50));
	rect_pt1.push_back(Point(400, 50));
	rect_pt1.push_back(Point(400, 250));
	rect_pt1.push_back(Point(200, 250));

	float theta = 20 * CV_PI / 180;
	Matx22f m(cos(theta), -sin(theta), sin(theta), cos(theta));
	transform(rect_pt1, rect_pt2, m);

	Mat image(400, 500, CV_8UC3, Scalar(255, 255, 255));
	for (int i = 0; i < 4; i++) {
		line(image, rect_pt1[i], rect_pt1[(i + 1) % 4], Scalar(0, 0, 0), 1);
		line(image, rect_pt2[i], rect_pt2[(i + 1) % 4], Scalar(255, 0, 0), 2);
		cout << "rect_pt1[ " + to_string(i) + "] = " << rect_pt1[i] << "\t";
		cout << "rect_pt2[ " + to_string(i) + "] = " << rect_pt2[i] <<endl;
	}
	imshow("image", image);
	waitKey();
	return 0;
}
*/

int main() {
	Matx33f m1(1, 0, 2, -3, 4, 6, -1, -2, -3);
	Matx31f m2(6, 30, 8);
	Mat m1_inv1, dst1, dst2;

	invert(m1, m1_inv1, DECOMP_LU);
	dst1 = m1_inv1 * (Mat)m2;
	solve(m1, m2, dst2, DECOMP_LU);

	cout << "[m1_inv1] = " << endl << m1_inv1 << endl << endl;
	cout << "[dst1] = " << dst1.t() << endl;

	cout << "[dst2] = " << dst2.t() << endl;
	return 0;

}

